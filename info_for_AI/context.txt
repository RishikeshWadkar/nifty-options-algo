Trading Bot Project Context - Complete Requirements (v2.0)
📊 Project Overview
I'm developing an algorithmic trading bot for Indian markets (NSE/NFO) using Python and the Shoonya API. The bot trades Nifty options using a zone-based strategy with precise entry/exit rules.

👨‍💻 My Background
Primary Job: SAP Hybris Developer
Coding Level: Basic Python knowledge, enterprise Java background
Trading Experience: Learning algorithmic trading
Setup: Planning to run locally on MacBook initially (no cloud servers yet)
🏗️ Current Architecture
Event-Driven System with these components:

EventQueue: Central message passing system
DataHandler: Connects to Shoonya API, gets market data via WebSocket
Strategy: Zone-based trading logic (calculates zones at 9:16 AM)
RiskManager: Daily trade limits, loss limits, position sizing
ExecutionGateway: Places orders through Shoonya API
PositionManager: Tracks open positions, handles SL/TP
Event Flow: MarketEvent → SignalEvent → OrderEvent → ExecutionEvent

🎯 Trading Strategy - "Nifty Small SL Algo" (COMPLETE SPECIFICATION)
Index & Strike Selection Rules:
Index Monitored: NIFTY50 (configurable - can be BANKNIFTY in future)
Strike Selection: Always trade exact ATM strike (closest to current index price at 9:16 AM)
Expiry: Always use current week's expiry options (latest weekly expiry)
Minimum Distance: At least 100pts ATM (to avoid high volatility strikes, but this is flexible)
Setup Phase (9:15:50 - 9:16:00):
9:15:50: Identify the ATM strike for current week expiry
9:16:00: Mark zones based on INDEX LTP (not option LTP)
Zone Definition (Based on INDEX Price):
Upper Zone: 9:16 INDEX LTP + 2.5 points (configurable)
Middle Zone: 9:16 INDEX LTP (exact price)
Lower Zone: 9:16 INDEX LTP - 2.5 points (configurable)
Example: If NIFTY at 25,000 at 9:16 AM:

Upper Zone = 25,002.5
Middle Zone = 25,000.0
Lower Zone = 24,997.5
Entry Logic (CRITICAL - POSITION MANAGEMENT):
Core Principle: Only ONE position type at a time. If new zone signal comes:

If previous order is FILLED: Keep the position, let SL handle exit
If previous order is PENDING: Cancel it immediately, place new order for current zone
Entry Rules:

Index crosses Upper Zone (≥25,002.5): Take CE (Call) entry on ATM strike
Index crosses Lower Zone (≤24,997.5): Take PE (Put) entry on ATM strike
Gates reopen logic: Can take opposite trade only when index touches Middle Zone again
Gate Control Example:

Index at 25,000 → Both gates open
Index moves to 25,003 → CE entry taken → Only PE gate open (but requires middle zone touch first)
If index drops to 25,000 → Both gates open again
If index drops to 24,997 → PE entry signal (cancel CE if pending, or keep CE if filled)
Order Execution Protocol:
Initial Order: Place Limit Order at (Current Option LTP + 1 rupee)
If not filled in 1 second: Modify order to (Current Option LTP + 1 rupee)
Retry Logic: Keep modifying up to 10 times (configurable)
Gap Between Retries: 1 rupee gap (was 0.5rs, now 1rs)
If 10 retries exhausted: Give up, wait for next zone crossing signal
If new zone signal during retries: Cancel current order, start fresh for new zone
Stop Loss Management:
Immediate SL: Add 2.5rs Stop Loss immediately after order gets filled
SL Type: 2.5 rupees from entry price (not percentage based)
Trailing Stop Loss Rules:
10rs profit achieved → Trail SL to Cost-to-Cost (CTC - breakeven)
20rs profit achieved → Trail SL to 10rs profit
40rs profit achieved → Trail SL to 30rs profit
60rs profit achieved → Trail SL to 40rs profit
80rs profit achieved → Trail SL to 50rs profit
Above 80rs profit → No more trailing, let market decide
Risk Management Rules:
Daily Trade Limit: Maximum 4 trades per day
Risk Per Trade (RPT): 2.5rs (₹125 per lot for Nifty)
Risk Per Day (RPD): 10rs (₹500 per day maximum loss)
Session End: Close ALL positions by 3:00 PM daily (avoid 3:30 PM volatility)
Daily Reset & Session Management:
Zone Recalculation: Every day at 9:16 AM sharp
Previous Positions: Close all positions by 3 PM (no carry forward)
Trading Hours: 9:16 AM to 3:00 PM
No Lunch Break: Continuous trading during market hours
📋 Configuration Structure
python
STRATEGY_CONFIG = {
    # Index Settings
    "index": "NIFTY50",              # NIFTY50, BANKNIFTY
    "zone_offset": 2.5,              # ± points from index for zones
    "min_atm_distance": 100,         # minimum distance for strike selection
    
    # Order Execution  
    "order_retry_limit": 10,         # max retries before giving up
    "order_retry_gap": 1.0,          # rupees gap for order modification
    "order_retry_timeout": 1,        # seconds between retries
    "initial_order_premium": 1.0,    # LTP + 1 rupee for limit orders
    
    # Risk Management
    "stop_loss": 2.5,                # rupees SL after entry
    "max_daily_trades": 4,           # maximum trades per day
    "max_daily_loss": 10.0,          # maximum loss per day (rupees)
    
    # Session Management
    "zone_calc_time": "09:16:00",    # daily zone calculation time
    "session_end_time": "15:00:00",  # force close all positions
    
    # Expiry Selection
    "expiry_type": "current_week"    # always use current week expiry
}
🛠️ Technical Stack
Language: Python
Broker API: Shoonya (Indian broker)
Database: SQLite for trade/order persistence
Logging: Loguru
Authentication: TOTP for 2FA
Environment: Local MacBook development
🔧 Current Implementation Status
✅ Built (by Cursor AI initially):

Event-driven architecture
Basic strategy implementation
Risk management framework
Database persistence
Paper trading mode
Shoonya API integration
🚀 Enhanced (by Claude):

Position management with trailing SL/TP
Auto-reconnection logic for WebSocket
System health monitoring
Alert system (Telegram/Email ready)
Configuration management
Error recovery mechanisms
🎯 Needs Implementation:

Order cancellation logic for pending orders
Retry mechanism with configurable limits
3 PM session closure automation
Enhanced zone monitoring
Configuration-driven parameters
📁 Project Structure
trading_bot/
├── broker/          # Shoonya API wrapper
├── strategy/        # Zone-based trading logic
├── risk/           # Risk management
├── execution/      # Order execution & modification
├── data/           # Market data handling
├── events/         # Event system
├── position/       # Position management
├── alerts/         # Notification system
├── monitor/        # System health monitoring
├── config/         # Configuration files
├── database/       # SQLite persistence
└── logs/           # Log files
🎭 Event System (Simplified Understanding)
Think of events as "messages" between different parts of the bot:

MarketEvent: "New price data received" (Index price updates)
SignalEvent: "Trading opportunity found" (Zone crossing detected)
OrderEvent: "Place/Cancel/Modify this order"
ExecutionEvent: "Order completed/failed"
Each component processes its relevant events and passes messages to the next component via queues.

💡 Capital Requirements & Expectations
Nifty: ₹8K each side (₹16K + Margin = ₹30K total)
BankNifty: ₹11K each side (₹40K total)
Slippage Budget: ₹4K average accounted
Monthly Drawdown: 22 days × ₹500 = ₹11K + ₹4K slippage = ₹15K/month
🧪 Testing Requirements
1-month paper trading mandatory before live
Excel maintenance for trade tracking and analysis
Live market data for paper trading (via Shoonya API)
🚨 Critical Implementation Details
Order Management Flow:
1. Zone crossing detected → Generate SignalEvent
2. Check if previous order exists:
   - If PENDING → Cancel it immediately
   - If FILLED → Keep position, add to tracking
3. Place new order for current zone signal
4. Retry up to 10 times with modifications
5. If filled → Add 2.5rs SL immediately
6. If new zone signal → Cancel current attempts, start fresh
Position States:
No Position: Both CE/PE gates open (if in middle zone)
CE Position Filled: Only PE gate open (needs middle zone touch)
PE Position Filled: Only CE gate open (needs middle zone touch)
Order Pending: Cancel if new zone signal, keep retrying otherwise
Error Handling Priorities:
WebSocket Disconnection: Auto-reconnect, don't lose positions
Order Placement Failure: Log and retry with fallback
API Rate Limits: Implement backoff strategy
Session End: Force close all positions by 3 PM
🎯 Next Development Priorities
Order Execution Module - Cancel pending + retry logic
Zone Monitoring Enhancement - Precise INDEX price tracking
Session Management - Auto-close at 3 PM
Configuration System - All parameters configurable
Enhanced Logging - Order flow and position tracking
🤔 Known Challenges & Solutions
Rapid Zone Crossings: Cancel-and-replace logic handles this
Order Slippage: Retry mechanism with price updates
End-of-day Risk: Forced closure at 3 PM
WebSocket Stability: Auto-reconnection with state preservation
💻 Development Environment
OS: macOS (MacBook)
IDE: VS Code
Version Control: GitHub
Testing: Paper trading with live data
Monitoring: Local logs and database initially
Current Status: Core architecture complete. Ready for order execution enhancement and paper trading validation. All strategy rules clarified and documented for implementation.

Key Success Metrics: Consistent small profits with controlled drawdowns, reliable order execution, zero overnight positions, proper risk management.

