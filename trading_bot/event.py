from dataclasses import dataclass
from typing import Optional, Any
from datetime import datetime

@dataclass
class MarketEvent:
    """
    Event representing a new market data tick or candle.
    """
    symbol: str
    timestamp: datetime
    price: float
    volume: Optional[float] = None
    ohlcv: Optional[dict] = None  # {'open': float, 'high': float, 'low': float, 'close': float, 'volume': float}

@dataclass
class SignalEvent:
    """
    Event representing a trading signal generated by the strategy.
    """
    symbol: str
    timestamp: datetime
    signal_type: str  # e.g., 'LONG', 'SHORT', 'EXIT'
    strength: Optional[float] = None
    info: Optional[Any] = None

@dataclass
class OrderEvent:
    """
    Event representing an order to be sent to the broker.
    """
    symbol: str
    timestamp: datetime
    order_type: str  # e.g., 'MARKET', 'LIMIT', 'SL'
    side: str        # 'BUY' or 'SELL'
    quantity: int
    price: Optional[float] = None
    stop_price: Optional[float] = None
    order_uuid: Optional[str] = None
    info: Optional[Any] = None

@dataclass
class ExecutionEvent:
    """
    Event representing the result of an order execution (fill, reject, etc.).
    """
    symbol: str
    timestamp: datetime
    order_uuid: str
    status: str  # e.g., 'FILLED', 'REJECTED', 'CANCELLED', 'PARTIALLY_FILLED'
    filled_quantity: Optional[int] = None
    avg_fill_price: Optional[float] = None
    broker_order_id: Optional[str] = None
    info: Optional[Any] = None

@dataclass
class RiskViolationEvent:
    """
    Event representing a risk rule violation (blocked trade, etc.).
    """
    symbol: str
    timestamp: datetime
    reason: str
    signal_event: Optional[SignalEvent] = None
    info: Optional[Any] = None
